{"env_info": "sys.platform: linux\nPython: 3.6.9 | packaged by conda-forge | (default, Mar  6 2020, 19:24:21) [GCC 7.3.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 3060\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 10.1, V10.1.168\nGCC: gcc (Ubuntu 5.5.0-12ubuntu1) 5.5.0 20171010\nPyTorch: 1.8.0+cu111\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.9.0+cu111\nOpenCV: 4.1.2\nMMCV: 1.4.0\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.1\nMMDetection: 2.15.1+52f2ad7", "config": "checkpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = 'https://download.openmmlab.com/mmdetection/v2.0/yolo/yolov3_d53_mstrain-608_273e_coco/yolov3_d53_mstrain-608_273e_coco_20210518_115020-a2c3acb8.pth'\nresume_from = None\nworkflow = [('train', 1)]\ndataset_type = 'ExdarkDataset'\ndata_root = '/mnt/sda1/Exdark/Exdark/'\nimg_norm_cfg = dict(mean=[0, 0, 0], std=[255.0, 255.0, 255.0], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile', to_float32=True),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Expand', mean=[0, 0, 0], to_rgb=True, ratio_range=(1, 2)),\n    dict(\n        type='MinIoURandomCrop',\n        min_ious=(0.4, 0.5, 0.6, 0.7, 0.8, 0.9),\n        min_crop_size=0.3),\n    dict(type='Resize', img_scale=[(320, 320), (608, 608)], keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[0, 0, 0],\n        std=[255.0, 255.0, 255.0],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(608, 608),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[0, 0, 0],\n                std=[255.0, 255.0, 255.0],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=4,\n    train=dict(\n        type='ExdarkDataset',\n        ann_file='/mnt/sda1/Exdark/Exdark/main/train.txt',\n        img_prefix='/mnt/sda1/Exdark/Exdark/JPEGImages/IMGS',\n        pipeline=[\n            dict(type='LoadImageFromFile', to_float32=True),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='Expand', mean=[0, 0, 0], to_rgb=True,\n                ratio_range=(1, 2)),\n            dict(\n                type='MinIoURandomCrop',\n                min_ious=(0.4, 0.5, 0.6, 0.7, 0.8, 0.9),\n                min_crop_size=0.3),\n            dict(\n                type='Resize',\n                img_scale=[(320, 320), (608, 608)],\n                keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[0, 0, 0],\n                std=[255.0, 255.0, 255.0],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='ExdarkDataset',\n        ann_file='/mnt/sda1/Exdark/Exdark/main/val.txt',\n        img_prefix='/mnt/sda1/Exdark/Exdark/JPEGImages/IMGS',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(608, 608),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[0, 0, 0],\n                        std=[255.0, 255.0, 255.0],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='ExdarkDataset',\n        ann_file='/mnt/sda1/Exdark/Exdark/main/val.txt',\n        img_prefix='/mnt/sda1/Exdark/Exdark/JPEGImages/IMGS',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(608, 608),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[0, 0, 0],\n                        std=[255.0, 255.0, 255.0],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nmodel = dict(\n    type='AOD_YOLOV3',\n    pre_encoder=dict(type='AODnet'),\n    backbone=dict(\n        type='Darknet',\n        depth=53,\n        out_indices=(3, 4, 5),\n        init_cfg=dict(type='Pretrained', checkpoint='open-mmlab://darknet53')),\n    neck=dict(\n        type='YOLOV3Neck',\n        num_scales=3,\n        in_channels=[1024, 512, 256],\n        out_channels=[512, 256, 128]),\n    bbox_head=dict(\n        type='YOLOV3Head',\n        num_classes=12,\n        in_channels=[512, 256, 128],\n        out_channels=[1024, 512, 256],\n        anchor_generator=dict(\n            type='YOLOAnchorGenerator',\n            base_sizes=[[(116, 90), (156, 198), (373, 326)],\n                        [(30, 61), (62, 45), (59, 119)],\n                        [(10, 13), (16, 30), (33, 23)]],\n            strides=[32, 16, 8]),\n        bbox_coder=dict(type='YOLOBBoxCoder'),\n        featmap_strides=[32, 16, 8],\n        loss_cls=dict(\n            type='CrossEntropyLoss',\n            use_sigmoid=True,\n            loss_weight=1.0,\n            reduction='sum'),\n        loss_conf=dict(\n            type='CrossEntropyLoss',\n            use_sigmoid=True,\n            loss_weight=1.0,\n            reduction='sum'),\n        loss_xy=dict(\n            type='CrossEntropyLoss',\n            use_sigmoid=True,\n            loss_weight=2.0,\n            reduction='sum'),\n        loss_wh=dict(type='MSELoss', loss_weight=2.0, reduction='sum')),\n    train_cfg=dict(\n        assigner=dict(\n            type='GridAssigner',\n            pos_iou_thr=0.5,\n            neg_iou_thr=0.5,\n            min_pos_iou=0)),\n    test_cfg=dict(\n        nms_pre=1000,\n        min_bbox_size=0,\n        score_thr=0.05,\n        conf_thr=0.005,\n        nms=dict(type='nms', iou_threshold=0.45),\n        max_per_img=100))\noptimizer = dict(type='SGD', lr=0.001, momentum=0.9, weight_decay=0.0005)\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=2000,\n    warmup_ratio=0.1,\n    step=[18, 23])\ntotal_epochs = 25\nevaluation = dict(interval=1, metric=['mAP'])\nwork_dir = 'AOD_YOLO_new'\ngpu_ids = range(0, 1)\n", "seed": null, "exp_name": "yolov3_AOD_none.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00012, "memory": 7456, "data_time": 0.06958, "loss_cls": 140.09194, "loss_conf": 388.34088, "loss_xy": 83.27484, "loss_wh": 11.29751, "loss": 623.00518, "grad_norm": 592.22771, "time": 0.74497}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00014, "memory": 7457, "data_time": 0.00453, "loss_cls": 132.48949, "loss_conf": 238.96719, "loss_xy": 80.40083, "loss_wh": 10.29092, "loss": 462.14844, "grad_norm": 345.39713, "time": 0.69154}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00017, "memory": 7457, "data_time": 0.00589, "loss_cls": 121.02852, "loss_conf": 221.37156, "loss_xy": 76.32537, "loss_wh": 9.82454, "loss": 428.55, "grad_norm": 353.5756, "time": 0.66743}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00019, "memory": 7457, "data_time": 0.00449, "loss_cls": 112.88266, "loss_conf": 214.73998, "loss_xy": 74.61864, "loss_wh": 9.99218, "loss": 412.23345, "grad_norm": 325.24455, "time": 0.70507}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00021, "memory": 7457, "data_time": 0.00443, "loss_cls": 100.00197, "loss_conf": 200.77148, "loss_xy": 71.06698, "loss_wh": 9.70924, "loss": 381.54967, "grad_norm": 289.94392, "time": 0.64805}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.00023, "memory": 7457, "data_time": 0.00444, "loss_cls": 97.13654, "loss_conf": 209.18468, "loss_xy": 73.46586, "loss_wh": 9.61577, "loss": 389.40285, "grad_norm": 277.44534, "time": 0.65221}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.00026, "memory": 7457, "data_time": 0.00451, "loss_cls": 97.51285, "loss_conf": 222.68385, "loss_xy": 79.05952, "loss_wh": 10.88959, "loss": 410.14582, "grad_norm": 286.74037, "time": 0.64867}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.00028, "memory": 7457, "data_time": 0.00449, "loss_cls": 95.23145, "loss_conf": 225.04236, "loss_xy": 77.09957, "loss_wh": 11.42514, "loss": 408.79852, "grad_norm": 258.91744, "time": 0.6639}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.0003, "memory": 7457, "data_time": 0.00457, "loss_cls": 87.25912, "loss_conf": 206.6275, "loss_xy": 73.85106, "loss_wh": 9.90415, "loss": 377.64183, "grad_norm": 228.52703, "time": 0.67065}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.00032, "memory": 7457, "data_time": 0.00496, "loss_cls": 89.75993, "loss_conf": 222.5663, "loss_xy": 77.53472, "loss_wh": 10.34274, "loss": 400.20369, "grad_norm": 233.55871, "time": 0.63075}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.00035, "memory": 7457, "data_time": 0.00449, "loss_cls": 80.34085, "loss_conf": 210.62561, "loss_xy": 73.91867, "loss_wh": 9.94993, "loss": 374.83506, "grad_norm": 211.12569, "time": 0.65901}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.00037, "memory": 7457, "data_time": 0.00448, "loss_cls": 88.7841, "loss_conf": 223.65831, "loss_xy": 77.62239, "loss_wh": 11.65028, "loss": 401.71509, "grad_norm": 230.72098, "time": 0.67364}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.00039, "memory": 7457, "data_time": 0.00518, "loss_cls": 86.83141, "loss_conf": 232.45356, "loss_xy": 81.02434, "loss_wh": 10.55007, "loss": 410.85938, "grad_norm": 313.23854, "time": 0.66456}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.00041, "memory": 7457, "data_time": 0.00455, "loss_cls": 75.2721, "loss_conf": 191.74592, "loss_xy": 68.10418, "loss_wh": 9.10637, "loss": 344.22857, "grad_norm": 214.74657, "time": 0.67385}
{"mode": "val", "epoch": 1, "iter": 1467, "lr": 0.00043, "AP50": 0.0, "mAP": 0.0}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.00045, "memory": 7457, "data_time": 0.06204, "loss_cls": 83.93456, "loss_conf": 215.92814, "loss_xy": 75.51853, "loss_wh": 10.40404, "loss": 385.78526, "grad_norm": 238.40923, "time": 0.69019}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.00048, "memory": 7457, "data_time": 0.00452, "loss_cls": 87.42876, "loss_conf": 230.519, "loss_xy": 81.46154, "loss_wh": 11.79037, "loss": 411.19967, "grad_norm": 243.24036, "time": 0.65348}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 0.0005, "memory": 7457, "data_time": 0.00464, "loss_cls": 84.34472, "loss_conf": 215.58357, "loss_xy": 75.86764, "loss_wh": 12.61746, "loss": 388.41338, "grad_norm": 212.70827, "time": 0.68443}
