{"env_info": "sys.platform: linux\nPython: 3.6.9 | packaged by conda-forge | (default, Mar  6 2020, 19:24:21) [GCC 7.3.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 3060\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 10.1, V10.1.168\nGCC: gcc (Ubuntu 5.5.0-12ubuntu1) 5.5.0 20171010\nPyTorch: 1.8.0+cu111\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.9.0+cu111\nOpenCV: 4.1.2\nMMCV: 1.4.0\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.1\nMMDetection: 2.15.1+52f2ad7", "config": "checkpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = 'https://download.openmmlab.com/mmdetection/v2.0/yolo/yolov3_d53_mstrain-608_273e_coco/yolov3_d53_mstrain-608_273e_coco_20210518_115020-a2c3acb8.pth'\nresume_from = None\nworkflow = [('train', 1)]\ndataset_type = 'ExdarkDataset'\ndata_root = '/mnt/sda1/Exdark/Exdark/'\nimg_norm_cfg = dict(mean=[0, 0, 0], std=[255.0, 255.0, 255.0], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile', to_float32=True),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Expand', mean=[0, 0, 0], to_rgb=True, ratio_range=(1, 2)),\n    dict(\n        type='MinIoURandomCrop',\n        min_ious=(0.4, 0.5, 0.6, 0.7, 0.8, 0.9),\n        min_crop_size=0.3),\n    dict(type='Resize', img_scale=[(320, 320), (608, 608)], keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[0, 0, 0],\n        std=[255.0, 255.0, 255.0],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(608, 608),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[0, 0, 0],\n                std=[255.0, 255.0, 255.0],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=4,\n    train=dict(\n        type='ExdarkDataset',\n        ann_file='/mnt/sda1/Exdark/Exdark/main/train.txt',\n        img_prefix='/mnt/sda1/Exdark/Exdark/JPEGImages/IMGS',\n        pipeline=[\n            dict(type='LoadImageFromFile', to_float32=True),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='Expand', mean=[0, 0, 0], to_rgb=True,\n                ratio_range=(1, 2)),\n            dict(\n                type='MinIoURandomCrop',\n                min_ious=(0.4, 0.5, 0.6, 0.7, 0.8, 0.9),\n                min_crop_size=0.3),\n            dict(\n                type='Resize',\n                img_scale=[(320, 320), (608, 608)],\n                keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[0, 0, 0],\n                std=[255.0, 255.0, 255.0],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='ExdarkDataset',\n        ann_file='/mnt/sda1/Exdark/Exdark/main/val.txt',\n        img_prefix='/mnt/sda1/Exdark/Exdark/JPEGImages/IMGS',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(608, 608),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[0, 0, 0],\n                        std=[255.0, 255.0, 255.0],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='ExdarkDataset',\n        ann_file='/mnt/sda1/Exdark/Exdark/main/val.txt',\n        img_prefix='/mnt/sda1/Exdark/Exdark/JPEGImages/IMGS',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(608, 608),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[0, 0, 0],\n                        std=[255.0, 255.0, 255.0],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nmodel = dict(\n    type='AOD_YOLOV3',\n    pre_encoder=dict(type='AODnet'),\n    backbone=dict(\n        type='Darknet',\n        depth=53,\n        out_indices=(3, 4, 5),\n        init_cfg=dict(type='Pretrained', checkpoint='open-mmlab://darknet53')),\n    neck=dict(\n        type='YOLOV3Neck',\n        num_scales=3,\n        in_channels=[1024, 512, 256],\n        out_channels=[512, 256, 128]),\n    bbox_head=dict(\n        type='YOLOV3Head',\n        num_classes=12,\n        in_channels=[512, 256, 128],\n        out_channels=[1024, 512, 256],\n        anchor_generator=dict(\n            type='YOLOAnchorGenerator',\n            base_sizes=[[(116, 90), (156, 198), (373, 326)],\n                        [(30, 61), (62, 45), (59, 119)],\n                        [(10, 13), (16, 30), (33, 23)]],\n            strides=[32, 16, 8]),\n        bbox_coder=dict(type='YOLOBBoxCoder'),\n        featmap_strides=[32, 16, 8],\n        loss_cls=dict(\n            type='CrossEntropyLoss',\n            use_sigmoid=True,\n            loss_weight=1.0,\n            reduction='sum'),\n        loss_conf=dict(\n            type='CrossEntropyLoss',\n            use_sigmoid=True,\n            loss_weight=1.0,\n            reduction='sum'),\n        loss_xy=dict(\n            type='CrossEntropyLoss',\n            use_sigmoid=True,\n            loss_weight=2.0,\n            reduction='sum'),\n        loss_wh=dict(type='MSELoss', loss_weight=2.0, reduction='sum')),\n    train_cfg=dict(\n        assigner=dict(\n            type='GridAssigner',\n            pos_iou_thr=0.5,\n            neg_iou_thr=0.5,\n            min_pos_iou=0)),\n    test_cfg=dict(\n        nms_pre=1000,\n        min_bbox_size=0,\n        score_thr=0.05,\n        conf_thr=0.005,\n        nms=dict(type='nms', iou_threshold=0.45),\n        max_per_img=100))\noptimizer = dict(type='SGD', lr=0.001, momentum=0.9, weight_decay=0.0005)\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=2000,\n    warmup_ratio=0.1,\n    step=[18, 23])\ntotal_epochs = 25\nevaluation = dict(interval=1, metric=['mAP'])\nwork_dir = 'AOD_YOLO_new'\ngpu_ids = range(0, 1)\n", "seed": null, "exp_name": "yolov3_AOD_none.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00012, "memory": 6929, "data_time": 0.05859, "loss_cls": 132.41295, "loss_conf": 420.10004, "loss_xy": 83.03961, "loss_wh": 13.86604, "loss": 649.41865, "grad_norm": 830.99434, "time": 0.64261}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00014, "memory": 6929, "data_time": 0.00449, "loss_cls": 97.33937, "loss_conf": 183.37595, "loss_xy": 70.29591, "loss_wh": 6.36756, "loss": 357.3788, "grad_norm": 601.3391, "time": 0.62841}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00017, "memory": 6929, "data_time": 0.00446, "loss_cls": 84.50066, "loss_conf": 131.37484, "loss_xy": 70.8859, "loss_wh": 5.31435, "loss": 292.07574, "grad_norm": 789.17439, "time": 0.57558}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00019, "memory": 6929, "data_time": 0.00446, "loss_cls": 73.61341, "loss_conf": 115.86754, "loss_xy": 72.47717, "loss_wh": 5.62447, "loss": 267.58259, "grad_norm": 911.39053, "time": 0.5967}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00021, "memory": 6929, "data_time": 0.00518, "loss_cls": 75.46728, "loss_conf": 110.75133, "loss_xy": 75.74831, "loss_wh": 5.80876, "loss": 267.77568, "grad_norm": 1042.48523, "time": 0.583}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.00023, "memory": 6929, "data_time": 0.00452, "loss_cls": 62.23892, "loss_conf": 97.54086, "loss_xy": 71.79744, "loss_wh": 5.8717, "loss": 237.44892, "grad_norm": 1007.53833, "time": 0.58892}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.00026, "memory": 6929, "data_time": 0.00557, "loss_cls": 53.64567, "loss_conf": 89.45659, "loss_xy": 67.81386, "loss_wh": 6.25484, "loss": 217.17097, "grad_norm": 1092.9124, "time": 0.60324}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.00028, "memory": 6929, "data_time": 0.00445, "loss_cls": 51.15768, "loss_conf": 90.39416, "loss_xy": 69.18459, "loss_wh": 6.06864, "loss": 216.80506, "grad_norm": 1114.29068, "time": 0.55434}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.0003, "memory": 6929, "data_time": 0.0048, "loss_cls": 45.07265, "loss_conf": 84.56747, "loss_xy": 67.40978, "loss_wh": 6.30063, "loss": 203.35053, "grad_norm": 975.3314, "time": 0.58376}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.00032, "memory": 6929, "data_time": 0.00519, "loss_cls": 39.78938, "loss_conf": 79.24185, "loss_xy": 65.54609, "loss_wh": 5.76241, "loss": 190.33974, "grad_norm": 1002.90632, "time": 0.56876}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.00035, "memory": 6929, "data_time": 0.00448, "loss_cls": 45.77327, "loss_conf": 94.0115, "loss_xy": 74.4526, "loss_wh": 7.86706, "loss": 222.10443, "grad_norm": 1091.63939, "time": 0.56808}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.00037, "memory": 6929, "data_time": 0.00448, "loss_cls": 38.63298, "loss_conf": 82.82812, "loss_xy": 70.09514, "loss_wh": 8.11434, "loss": 199.67058, "grad_norm": 1075.98981, "time": 0.56058}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.00039, "memory": 6929, "data_time": 0.00519, "loss_cls": 36.74107, "loss_conf": 88.5442, "loss_xy": 70.17229, "loss_wh": 6.72785, "loss": 202.18542, "grad_norm": 1079.74922, "time": 0.56997}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.00041, "memory": 6929, "data_time": 0.00444, "loss_cls": 31.76101, "loss_conf": 76.77351, "loss_xy": 64.42824, "loss_wh": 6.72135, "loss": 179.68411, "grad_norm": 989.54321, "time": 0.57924}
{"mode": "val", "epoch": 1, "iter": 1467, "lr": 0.00043, "AP50": 0.571, "mAP": 0.57095}
