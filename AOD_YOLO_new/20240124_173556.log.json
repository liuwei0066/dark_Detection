{"env_info": "sys.platform: linux\nPython: 3.6.9 | packaged by conda-forge | (default, Mar  6 2020, 19:24:21) [GCC 7.3.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 3060\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 10.1, V10.1.168\nGCC: gcc (Ubuntu 5.5.0-12ubuntu1) 5.5.0 20171010\nPyTorch: 1.8.0+cu111\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.9.0+cu111\nOpenCV: 4.1.2\nMMCV: 1.4.0\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.1\nMMDetection: 2.15.1+52f2ad7", "config": "checkpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = 'https://download.openmmlab.com/mmdetection/v2.0/yolo/yolov3_d53_mstrain-608_273e_coco/yolov3_d53_mstrain-608_273e_coco_20210518_115020-a2c3acb8.pth'\nresume_from = None\nworkflow = [('train', 1)]\ndataset_type = 'ExdarkDataset'\ndata_root = '/mnt/sda1/Exdark/Exdark/'\nimg_norm_cfg = dict(mean=[0, 0, 0], std=[255.0, 255.0, 255.0], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile', to_float32=True),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Expand', mean=[0, 0, 0], to_rgb=True, ratio_range=(1, 2)),\n    dict(\n        type='MinIoURandomCrop',\n        min_ious=(0.4, 0.5, 0.6, 0.7, 0.8, 0.9),\n        min_crop_size=0.3),\n    dict(type='Resize', img_scale=[(320, 320), (608, 608)], keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[0, 0, 0],\n        std=[255.0, 255.0, 255.0],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(608, 608),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[0, 0, 0],\n                std=[255.0, 255.0, 255.0],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=4,\n    train=dict(\n        type='ExdarkDataset',\n        ann_file='/mnt/sda1/Exdark/Exdark/main/train.txt',\n        img_prefix='/mnt/sda1/Exdark/Exdark/JPEGImages/IMGS',\n        pipeline=[\n            dict(type='LoadImageFromFile', to_float32=True),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='Expand', mean=[0, 0, 0], to_rgb=True,\n                ratio_range=(1, 2)),\n            dict(\n                type='MinIoURandomCrop',\n                min_ious=(0.4, 0.5, 0.6, 0.7, 0.8, 0.9),\n                min_crop_size=0.3),\n            dict(\n                type='Resize',\n                img_scale=[(320, 320), (608, 608)],\n                keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[0, 0, 0],\n                std=[255.0, 255.0, 255.0],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='ExdarkDataset',\n        ann_file='/mnt/sda1/Exdark/Exdark/main/val.txt',\n        img_prefix='/mnt/sda1/Exdark/Exdark/JPEGImages/IMGS',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(608, 608),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[0, 0, 0],\n                        std=[255.0, 255.0, 255.0],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='ExdarkDataset',\n        ann_file='/mnt/sda1/Exdark/Exdark/main/val.txt',\n        img_prefix='/mnt/sda1/Exdark/Exdark/JPEGImages/IMGS',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(608, 608),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[0, 0, 0],\n                        std=[255.0, 255.0, 255.0],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nmodel = dict(\n    type='AOD_YOLOV3',\n    pre_encoder=dict(type='AODnet'),\n    backbone=dict(\n        type='Darknet',\n        depth=53,\n        out_indices=(3, 4, 5),\n        init_cfg=dict(type='Pretrained', checkpoint='open-mmlab://darknet53')),\n    neck=dict(\n        type='YOLOV3Neck',\n        num_scales=3,\n        in_channels=[1024, 512, 256],\n        out_channels=[512, 256, 128]),\n    bbox_head=dict(\n        type='YOLOV3Head',\n        num_classes=12,\n        in_channels=[512, 256, 128],\n        out_channels=[1024, 512, 256],\n        anchor_generator=dict(\n            type='YOLOAnchorGenerator',\n            base_sizes=[[(116, 90), (156, 198), (373, 326)],\n                        [(30, 61), (62, 45), (59, 119)],\n                        [(10, 13), (16, 30), (33, 23)]],\n            strides=[32, 16, 8]),\n        bbox_coder=dict(type='YOLOBBoxCoder'),\n        featmap_strides=[32, 16, 8],\n        loss_cls=dict(\n            type='CrossEntropyLoss',\n            use_sigmoid=True,\n            loss_weight=1.0,\n            reduction='sum'),\n        loss_conf=dict(\n            type='CrossEntropyLoss',\n            use_sigmoid=True,\n            loss_weight=1.0,\n            reduction='sum'),\n        loss_xy=dict(\n            type='CrossEntropyLoss',\n            use_sigmoid=True,\n            loss_weight=2.0,\n            reduction='sum'),\n        loss_wh=dict(type='MSELoss', loss_weight=2.0, reduction='sum')),\n    train_cfg=dict(\n        assigner=dict(\n            type='GridAssigner',\n            pos_iou_thr=0.5,\n            neg_iou_thr=0.5,\n            min_pos_iou=0)),\n    test_cfg=dict(\n        nms_pre=1000,\n        min_bbox_size=0,\n        score_thr=0.05,\n        conf_thr=0.005,\n        nms=dict(type='nms', iou_threshold=0.45),\n        max_per_img=100))\noptimizer = dict(type='SGD', lr=0.001, momentum=0.9, weight_decay=0.0005)\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=2000,\n    warmup_ratio=0.1,\n    step=[18, 23])\ntotal_epochs = 25\nevaluation = dict(interval=1, metric=['mAP'])\nwork_dir = 'AOD_YOLO_new'\ngpu_ids = range(0, 1)\n", "seed": null, "exp_name": "yolov3_AOD_none.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00012, "memory": 7462, "data_time": 0.06529, "loss_cls": 125.92579, "loss_conf": 362.48518, "loss_xy": 74.58906, "loss_wh": 10.76251, "loss": 573.76253, "grad_norm": 569.97636, "time": 0.69087}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00014, "memory": 7462, "data_time": 0.00448, "loss_cls": 100.83069, "loss_conf": 188.76561, "loss_xy": 61.12901, "loss_wh": 7.77209, "loss": 358.49738, "grad_norm": 302.92201, "time": 0.66503}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00017, "memory": 7462, "data_time": 0.0049, "loss_cls": 128.78011, "loss_conf": 234.61669, "loss_xy": 80.55159, "loss_wh": 10.2661, "loss": 454.21448, "grad_norm": 313.88338, "time": 0.65341}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00019, "memory": 7462, "data_time": 0.0044, "loss_cls": 115.44812, "loss_conf": 220.40474, "loss_xy": 76.03444, "loss_wh": 9.89883, "loss": 421.78612, "grad_norm": 299.4256, "time": 0.6225}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00021, "memory": 7462, "data_time": 0.00442, "loss_cls": 111.77048, "loss_conf": 225.69634, "loss_xy": 79.42289, "loss_wh": 10.70191, "loss": 427.59161, "grad_norm": 268.80742, "time": 0.64798}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.00023, "memory": 7462, "data_time": 0.00447, "loss_cls": 98.85432, "loss_conf": 214.12252, "loss_xy": 74.90557, "loss_wh": 10.17627, "loss": 398.05868, "grad_norm": 272.57763, "time": 0.67556}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.00026, "memory": 7462, "data_time": 0.00525, "loss_cls": 86.31965, "loss_conf": 196.70755, "loss_xy": 67.87167, "loss_wh": 9.16806, "loss": 360.06694, "grad_norm": 257.19139, "time": 0.69471}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.00028, "memory": 7462, "data_time": 0.00453, "loss_cls": 91.19155, "loss_conf": 215.95775, "loss_xy": 76.79653, "loss_wh": 10.59261, "loss": 394.53844, "grad_norm": 245.34792, "time": 0.68821}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.0003, "memory": 7462, "data_time": 0.00467, "loss_cls": 94.98316, "loss_conf": 232.35332, "loss_xy": 81.14689, "loss_wh": 11.50189, "loss": 419.98526, "grad_norm": 248.25651, "time": 0.64945}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.00032, "memory": 7462, "data_time": 0.00458, "loss_cls": 82.19347, "loss_conf": 205.47214, "loss_xy": 71.92286, "loss_wh": 10.61822, "loss": 370.20668, "grad_norm": 212.39378, "time": 0.69207}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.00035, "memory": 7462, "data_time": 0.0044, "loss_cls": 83.17206, "loss_conf": 212.87436, "loss_xy": 74.33945, "loss_wh": 10.16724, "loss": 380.55311, "grad_norm": 226.85644, "time": 0.65114}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.00037, "memory": 7462, "data_time": 0.00446, "loss_cls": 75.67406, "loss_conf": 190.61346, "loss_xy": 66.98977, "loss_wh": 10.31945, "loss": 343.59674, "grad_norm": 194.09837, "time": 0.65163}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.00039, "memory": 7462, "data_time": 0.00571, "loss_cls": 92.90822, "loss_conf": 240.36494, "loss_xy": 83.31012, "loss_wh": 11.93568, "loss": 428.51896, "grad_norm": 216.34571, "time": 0.66101}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.00041, "memory": 7462, "data_time": 0.00439, "loss_cls": 87.42659, "loss_conf": 235.25534, "loss_xy": 82.45627, "loss_wh": 12.18972, "loss": 417.32792, "grad_norm": 220.64902, "time": 0.62484}
{"mode": "val", "epoch": 1, "iter": 1467, "lr": 0.00043, "AP50": 0.001, "mAP": 0.00115}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.00045, "memory": 7462, "data_time": 0.06828, "loss_cls": 78.74715, "loss_conf": 203.27074, "loss_xy": 72.48787, "loss_wh": 10.64112, "loss": 365.14688, "grad_norm": 175.0976, "time": 0.68773}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.00048, "memory": 7462, "data_time": 0.00446, "loss_cls": 89.74999, "loss_conf": 237.71533, "loss_xy": 83.98046, "loss_wh": 12.81662, "loss": 424.2624, "grad_norm": 199.02696, "time": 0.64736}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 0.0005, "memory": 7462, "data_time": 0.00442, "loss_cls": 78.50484, "loss_conf": 205.98439, "loss_xy": 71.46534, "loss_wh": 10.11148, "loss": 366.06606, "grad_norm": 158.97463, "time": 0.6506}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.00052, "memory": 7462, "data_time": 0.00444, "loss_cls": 76.52302, "loss_conf": 202.14904, "loss_xy": 70.26539, "loss_wh": 10.59923, "loss": 359.53668, "grad_norm": 155.26299, "time": 0.64864}
{"mode": "train", "epoch": 2, "iter": 250, "lr": 0.00054, "memory": 7462, "data_time": 0.00458, "loss_cls": 77.03549, "loss_conf": 198.73726, "loss_xy": 70.73748, "loss_wh": 10.19441, "loss": 356.70463, "grad_norm": 143.6334, "time": 0.68168}
{"mode": "train", "epoch": 2, "iter": 300, "lr": 0.00057, "memory": 7462, "data_time": 0.0045, "loss_cls": 86.43178, "loss_conf": 231.7689, "loss_xy": 80.70992, "loss_wh": 12.146, "loss": 411.0566, "grad_norm": 165.45349, "time": 0.6608}
{"mode": "train", "epoch": 2, "iter": 350, "lr": 0.00059, "memory": 7462, "data_time": 0.00445, "loss_cls": 73.46578, "loss_conf": 187.25899, "loss_xy": 65.26239, "loss_wh": 10.39205, "loss": 336.37921, "grad_norm": 134.88474, "time": 0.63411}
{"mode": "train", "epoch": 2, "iter": 400, "lr": 0.00061, "memory": 7462, "data_time": 0.00448, "loss_cls": 88.47828, "loss_conf": 241.22603, "loss_xy": 83.32962, "loss_wh": 12.86656, "loss": 425.90048, "grad_norm": 158.86495, "time": 0.64451}
{"mode": "train", "epoch": 2, "iter": 450, "lr": 0.00063, "memory": 7462, "data_time": 0.00443, "loss_cls": 89.59778, "loss_conf": 229.50725, "loss_xy": 81.66785, "loss_wh": 11.67341, "loss": 412.44628, "grad_norm": 137.95553, "time": 0.62249}
{"mode": "train", "epoch": 2, "iter": 500, "lr": 0.00066, "memory": 7462, "data_time": 0.00447, "loss_cls": 89.35531, "loss_conf": 242.53181, "loss_xy": 85.4821, "loss_wh": 12.34856, "loss": 429.71778, "grad_norm": 140.78793, "time": 0.65146}
{"mode": "train", "epoch": 2, "iter": 550, "lr": 0.00068, "memory": 7462, "data_time": 0.00441, "loss_cls": 82.05187, "loss_conf": 219.67734, "loss_xy": 77.09141, "loss_wh": 11.8022, "loss": 390.62283, "grad_norm": 128.41037, "time": 0.63748}
{"mode": "train", "epoch": 2, "iter": 600, "lr": 0.0007, "memory": 7462, "data_time": 0.00493, "loss_cls": 82.22029, "loss_conf": 219.09307, "loss_xy": 77.951, "loss_wh": 11.88675, "loss": 391.15112, "grad_norm": 129.59247, "time": 0.65823}
{"mode": "train", "epoch": 2, "iter": 650, "lr": 0.00072, "memory": 7462, "data_time": 0.00451, "loss_cls": 75.75912, "loss_conf": 199.60456, "loss_xy": 69.98824, "loss_wh": 10.80588, "loss": 356.1578, "grad_norm": 119.08513, "time": 0.64993}
{"mode": "train", "epoch": 2, "iter": 700, "lr": 0.00075, "memory": 7462, "data_time": 0.0045, "loss_cls": 84.39934, "loss_conf": 226.63961, "loss_xy": 78.96352, "loss_wh": 12.03357, "loss": 402.03604, "grad_norm": 128.05471, "time": 0.65165}
{"mode": "val", "epoch": 2, "iter": 1467, "lr": 0.00076, "AP50": 0.002, "mAP": 0.002}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.00079, "memory": 7462, "data_time": 0.05844, "loss_cls": 82.33995, "loss_conf": 220.23291, "loss_xy": 76.12493, "loss_wh": 11.58165, "loss": 390.27945, "grad_norm": 117.79497, "time": 0.71997}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 0.00081, "memory": 7462, "data_time": 0.00447, "loss_cls": 88.40857, "loss_conf": 234.23938, "loss_xy": 81.34121, "loss_wh": 12.56285, "loss": 416.55201, "grad_norm": 124.95475, "time": 0.634}
{"mode": "train", "epoch": 3, "iter": 150, "lr": 0.00083, "memory": 7462, "data_time": 0.00457, "loss_cls": 81.96058, "loss_conf": 222.48453, "loss_xy": 77.48035, "loss_wh": 12.35865, "loss": 394.28411, "grad_norm": 113.67816, "time": 0.69599}
{"mode": "train", "epoch": 3, "iter": 200, "lr": 0.00085, "memory": 7462, "data_time": 0.00452, "loss_cls": 83.77455, "loss_conf": 222.76205, "loss_xy": 77.66791, "loss_wh": 11.0945, "loss": 395.299, "grad_norm": 102.0892, "time": 0.67065}
{"mode": "train", "epoch": 3, "iter": 250, "lr": 0.00088, "memory": 7462, "data_time": 0.00455, "loss_cls": 94.38682, "loss_conf": 242.88757, "loss_xy": 86.30887, "loss_wh": 12.74549, "loss": 436.32875, "grad_norm": 108.33929, "time": 0.67587}
{"mode": "train", "epoch": 3, "iter": 300, "lr": 0.0009, "memory": 7462, "data_time": 0.00458, "loss_cls": 74.31397, "loss_conf": 191.9517, "loss_xy": 66.75172, "loss_wh": 9.75647, "loss": 342.77385, "grad_norm": 92.41495, "time": 0.66382}
{"mode": "train", "epoch": 3, "iter": 350, "lr": 0.00092, "memory": 7462, "data_time": 0.00458, "loss_cls": 82.59222, "loss_conf": 216.41595, "loss_xy": 75.84236, "loss_wh": 12.08427, "loss": 386.9348, "grad_norm": 100.71076, "time": 0.68385}
{"mode": "train", "epoch": 3, "iter": 400, "lr": 0.00094, "memory": 7462, "data_time": 0.00487, "loss_cls": 84.21463, "loss_conf": 218.77344, "loss_xy": 77.65608, "loss_wh": 11.54195, "loss": 392.18611, "grad_norm": 91.62426, "time": 0.65303}
{"mode": "train", "epoch": 3, "iter": 450, "lr": 0.00097, "memory": 7462, "data_time": 0.00441, "loss_cls": 85.20769, "loss_conf": 223.7264, "loss_xy": 78.17225, "loss_wh": 11.69625, "loss": 398.80258, "grad_norm": 91.70892, "time": 0.66092}
{"mode": "train", "epoch": 3, "iter": 500, "lr": 0.00099, "memory": 7462, "data_time": 0.00453, "loss_cls": 81.38669, "loss_conf": 220.21075, "loss_xy": 76.89442, "loss_wh": 10.93271, "loss": 389.42457, "grad_norm": 93.60852, "time": 0.6599}
{"mode": "train", "epoch": 3, "iter": 550, "lr": 0.001, "memory": 7462, "data_time": 0.00697, "loss_cls": 84.95097, "loss_conf": 219.12684, "loss_xy": 77.4054, "loss_wh": 11.62666, "loss": 393.10986, "grad_norm": 88.15606, "time": 0.69629}
{"mode": "train", "epoch": 3, "iter": 600, "lr": 0.001, "memory": 7462, "data_time": 0.00447, "loss_cls": 76.29703, "loss_conf": 209.00894, "loss_xy": 73.81255, "loss_wh": 12.16851, "loss": 371.28704, "grad_norm": 87.1813, "time": 0.63215}
{"mode": "train", "epoch": 3, "iter": 650, "lr": 0.001, "memory": 7462, "data_time": 0.00442, "loss_cls": 74.22362, "loss_conf": 203.41653, "loss_xy": 70.67252, "loss_wh": 9.7714, "loss": 358.08407, "grad_norm": 77.75584, "time": 0.64909}
{"mode": "train", "epoch": 3, "iter": 700, "lr": 0.001, "memory": 7462, "data_time": 0.00444, "loss_cls": 81.36507, "loss_conf": 220.56476, "loss_xy": 77.31001, "loss_wh": 10.69807, "loss": 389.9379, "grad_norm": 82.07032, "time": 0.64973}
{"mode": "val", "epoch": 3, "iter": 1467, "lr": 0.001, "AP50": 0.002, "mAP": 0.00248}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 0.001, "memory": 7462, "data_time": 0.06733, "loss_cls": 76.88028, "loss_conf": 206.10466, "loss_xy": 72.21652, "loss_wh": 10.66927, "loss": 365.87073, "grad_norm": 73.72241, "time": 0.70284}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 0.001, "memory": 7462, "data_time": 0.00484, "loss_cls": 79.15344, "loss_conf": 213.04571, "loss_xy": 74.61248, "loss_wh": 10.4947, "loss": 377.30633, "grad_norm": 79.80753, "time": 0.67853}
{"mode": "train", "epoch": 4, "iter": 150, "lr": 0.001, "memory": 7462, "data_time": 0.0045, "loss_cls": 87.16295, "loss_conf": 234.94576, "loss_xy": 82.39811, "loss_wh": 12.90066, "loss": 417.40748, "grad_norm": 82.43264, "time": 0.65609}
{"mode": "train", "epoch": 4, "iter": 200, "lr": 0.001, "memory": 7462, "data_time": 0.00646, "loss_cls": 84.95188, "loss_conf": 216.04752, "loss_xy": 77.24488, "loss_wh": 10.82188, "loss": 389.06617, "grad_norm": 95.46749, "time": 0.65305}
{"mode": "train", "epoch": 4, "iter": 250, "lr": 0.001, "memory": 7462, "data_time": 0.00579, "loss_cls": 84.71938, "loss_conf": 229.65681, "loss_xy": 80.62426, "loss_wh": 11.86076, "loss": 406.8612, "grad_norm": 140.29778, "time": 0.66993}
{"mode": "train", "epoch": 4, "iter": 300, "lr": 0.001, "memory": 7462, "data_time": 0.00459, "loss_cls": 85.27229, "loss_conf": 228.44145, "loss_xy": 78.23445, "loss_wh": 11.28794, "loss": 403.23613, "grad_norm": 146.94578, "time": 0.64628}
{"mode": "train", "epoch": 4, "iter": 350, "lr": 0.001, "memory": 7462, "data_time": 0.00624, "loss_cls": 75.43494, "loss_conf": 198.64711, "loss_xy": 69.4457, "loss_wh": 10.56857, "loss": 354.09631, "grad_norm": 115.86957, "time": 0.6773}
{"mode": "train", "epoch": 4, "iter": 400, "lr": 0.001, "memory": 7462, "data_time": 0.00555, "loss_cls": 75.82185, "loss_conf": 201.96383, "loss_xy": 70.19036, "loss_wh": 10.7307, "loss": 358.70673, "grad_norm": 137.06124, "time": 0.66264}
{"mode": "train", "epoch": 4, "iter": 450, "lr": 0.001, "memory": 7462, "data_time": 0.00507, "loss_cls": 78.26465, "loss_conf": 210.11015, "loss_xy": 72.93528, "loss_wh": 9.96592, "loss": 371.276, "grad_norm": 249.86686, "time": 0.68399}
{"mode": "train", "epoch": 4, "iter": 500, "lr": 0.001, "memory": 7462, "data_time": 0.00522, "loss_cls": 85.11157, "loss_conf": 230.82842, "loss_xy": 80.22573, "loss_wh": 10.64351, "loss": 406.80923, "grad_norm": 280.62665, "time": 0.66215}
{"mode": "train", "epoch": 4, "iter": 550, "lr": 0.001, "memory": 7462, "data_time": 0.00596, "loss_cls": 83.73901, "loss_conf": 225.16523, "loss_xy": 78.92822, "loss_wh": 9.70539, "loss": 397.53785, "grad_norm": 231.02888, "time": 0.67103}
{"mode": "train", "epoch": 4, "iter": 600, "lr": 0.001, "memory": 7462, "data_time": 0.00504, "loss_cls": 88.26199, "loss_conf": 234.50613, "loss_xy": 80.78033, "loss_wh": 10.72179, "loss": 414.27023, "grad_norm": 215.24513, "time": 0.64912}
{"mode": "train", "epoch": 4, "iter": 650, "lr": 0.001, "memory": 7462, "data_time": 0.00439, "loss_cls": 81.59896, "loss_conf": 216.89779, "loss_xy": 74.5404, "loss_wh": 10.18734, "loss": 383.22448, "grad_norm": 154.12429, "time": 0.65193}
{"mode": "train", "epoch": 4, "iter": 700, "lr": 0.001, "memory": 7462, "data_time": 0.00466, "loss_cls": 76.11918, "loss_conf": 203.90564, "loss_xy": 69.97314, "loss_wh": 9.96887, "loss": 359.96683, "grad_norm": 103.30433, "time": 0.67083}
{"mode": "val", "epoch": 4, "iter": 1467, "lr": 0.001, "AP50": 0.001, "mAP": 0.00096}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 0.001, "memory": 7462, "data_time": 0.07006, "loss_cls": 80.96412, "loss_conf": 223.83988, "loss_xy": 76.37916, "loss_wh": 11.04211, "loss": 392.22526, "grad_norm": 129.12952, "time": 0.75462}
